[["intro.html", "Notas de R Chapter 1 Introducción a R 1.1 Historia de R 1.2 Ventajas de R 1.3 Learning R Hub 1.4 Introducción a R para Estudiantes de Microbiología 1.5 Comienza con R 1.6 Ayuda en R", " Notas de R Roberto Álvarez 2024-05-24 Chapter 1 Introducción a R 1.1 Historia de R R es un lenguaje de programación derivado de S. ¿Qué es S? Es un lenguaje de programación desarrollado por John Chambers (AT&amp;T) en 1976, su función inicial era el análisis estadístico. Fue hasta 1998 que se lanzó la cuarta versión en “Programming with Data”, dicho libro documenta una versión muy similar a la que conocemos hoy en día, la cual incluye el análisis funcional estadístio. El lenguaje S tiene como raíz el análisis de datos, sus desarrolladores se enfocaron en contruir un lenguaje que resultara sencillo tanto para los ellos como para los usuarios, ¿Cómo? desarrollando un método de programación basado en líneas de comando. Volviendo a R, se creó en 1991 por Ross Ihaka y Robert Gentleman. Fue en 1996 que se lanzó oficialmente: “R: A lenguaje for data anlysis and graphics”, siendo incialmente bastante similar al lenguaje S. Una gran ventaja de R fue su lanzamiento como software libre (la limitación clave de S fue su única disponibilidad como paquete comercial, S-PLUS), esto permitió que la fuente de código del sistema entero fuera accesible para cualquiera que decidiera emplearlo. Al día de hoy R se puede emplear en casi cualquier plataforma de cómputo y sistema operativo, esto es gracias a su naturaleza open source, es decir, que cualquiera es libre de adaptar el software a la plataforma que desee. Uno de los más grandes beneficios de R, no relacionado per se al lenguaje, es la comunidad de usuarios. Sus característicad de una comunidad muy activa, multidisciplinaria y de distintas partes del mundo ha permitido la construcción de una plataforma que tiene éxito en medida que las personas crean y apoyan el desarrollo de nuevas herramientas, paquetes, aplicaciones, así mismo como el apoyo a nuevos usuarios. 1.2 Ventajas de R R es un entorno integrado para el manejo de datos, el cálculo, la generación de gráficos y análisis estadísticos. Las principales ventajas del uso de R son: Software libre. Facilidad para el manejo y almacenamiento de datos. Un conjunto de operadores para el cálculo de vectores y matrices. Una colección extensa e integrada de herramientas intermedias para el análisis estadístico de datos. Multitud de facilidades gráficas de altísima calidad. Un lenguaje de programación (muy) poderoso con muchas librerías especializadas disponibles. CRAN tiene aproximadamente 10k paqueterías disponibles, muchas más que el número de funciones de Excel. La mejor herramienta para trabajar con datos genómicos, proteómicos, redes, metabolómica, entre varias más. Casi todos podemos aprender por nuestra cuenta a usar excel (pero hay que pagar por la licencia, es software privativo…). Sin embargo, aunque es más difícil aprender por nuestra cuenta R, si lo hacemos nos da una ventaja comparativa sobre el resto de estudiantes de licenciaturas afines. R tiene la capacidad de relacionarse y trabajar de manera paralela con otros software (Microsoft Office, QGIS..). Algunas ventajas de R sobre, por ejemplo, la paquetería Office, son su capacidad de iteración, reproducibilidad, automatización, la generación de reportes dinámicos, múltiples formatos de salida (PDF, HTML, páginas de internet, artículos científicos, diapositivas), conexión directa con buscadores de internet. 1.3 Learning R Hub En este sitio web se presentan varios recurso adicionales en línea para aprender R Learning R Hub 1.4 Introducción a R para Estudiantes de Microbiología R es un lenguaje de programación y un entorno de desarrollo estadístico ampliamente utilizado en la comunidad científica, incluida la microbiología. Este poderoso recurso ofrece una variedad de ventajas y funcionalidades que pueden beneficiar significativamente a los estudiantes de microbiología en su investigación y análisis de datos. 1.4.1 Ventajas de Aprender R para Estudiantes de Microbiología 1. Análisis Estadístico Avanzado R proporciona una amplia gama de paquetes y herramientas estadísticas que permiten a los estudiantes de microbiología realizar análisis avanzados de datos, desde pruebas de hipótesis básicas hasta modelos de regresión y análisis multivariados. 2. Visualización de Datos Con paquetes como ggplot2, los estudiantes pueden crear visualizaciones de datos interactivas y de alta calidad que facilitan la comprensión de patrones y tendencias en conjuntos de datos microbiológicos, como datos de secuenciación genómica o datos de ecología microbiana. 3. Reproducibilidad y Documentación RMarkdown es una herramienta poderosa que permite a los estudiantes escribir documentos reproducibles que combinan código, resultados y narrativa en un solo lugar. Esto promueve la transparencia, la reproducibilidad y una mejor documentación de los análisis microbiológicos. 4. Acceso a una Comunidad Activa R cuenta con una comunidad activa de usuarios y desarrolladores que comparten código, paquetes y recursos educativos. Los estudiantes pueden aprovechar este recurso para buscar ayuda, colaborar en proyectos y mantenerse al tanto de las últimas tendencias en análisis de datos microbiológicos. 5. Flexibilidad y Personalización R es un lenguaje altamente flexible que permite a los estudiantes adaptar sus análisis a las necesidades específicas de sus proyectos microbiológicos. Desde la manipulación de datos hasta la creación de modelos personalizados, R ofrece la libertad y la capacidad de personalización necesarias para abordar una amplia variedad de preguntas de investigación en microbiología. Aprender R puede ser extremadamente beneficioso para los estudiantes de microbiología al proporcionarles las herramientas y habilidades necesarias para realizar análisis de datos sofisticados, visualizar resultados de manera efectiva y promover la reproducibilidad en su investigación científica. 1.5 Comienza con R 1.5.1 Instalación Para iniciar en R es necesario instalarlo. R está disponible para los sistemas Windows, Mac OS X y Linux. El lenguaje de programación R tiene integrado un ambiente de desarrollo (IDE, por sus siglas en inglés) llamado RStudio. Este IDE facilita la sintaxis y edición del código, así como la visualización de objetos. Si requiere ver un tutorial de cómo instalar R y RStudio para Mac o Windows, puede apoyarse de los siguientes videos: Instalación para Windows Instalación para Mac 1.5.2 Paquetes o bibliotecas Las funciones especializadas de R se guardan en paquetes (packages) que deben ser invocados ANTES de llamar a una función del paquete. Una manera de instalar paquetes es mediante el repositorio CRAN. Navega por CRAN y encuentra algunos paquetes que podrían interesarte. Hay miles y cada día aumentan. Para saber qué paquetes se tienen instalados en tu máquina teclea la función library() library() Para cargar un paquete, que se encuentre previamente instalado, se debe teclear library(nombre_de_paquete) Por ejemplo: library(gplots) ## ## Attaching package: &#39;gplots&#39; ## The following object is masked from &#39;package:stats&#39;: ## ## lowess Para visualizar los paquetes ya cargados, teclea: search() ## [1] &quot;.GlobalEnv&quot; &quot;package:gplots&quot; &quot;package:stats&quot; ## [4] &quot;package:graphics&quot; &quot;package:grDevices&quot; &quot;package:utils&quot; ## [7] &quot;package:datasets&quot; &quot;package:methods&quot; &quot;Autoloads&quot; ## [10] &quot;package:base&quot; Para visualizar las funciones dentro de un paquete en particular se utiliza: ls(2) ## [1] &quot;angleAxis&quot; &quot;balloonplot&quot; &quot;bandplot&quot; &quot;barplot2&quot; ## [5] &quot;bluered&quot; &quot;boxplot2&quot; &quot;ci2d&quot; &quot;col2hex&quot; ## [9] &quot;colorpanel&quot; &quot;greenred&quot; &quot;heatmap.2&quot; &quot;hist2d&quot; ## [13] &quot;lmplot2&quot; &quot;lowess&quot; &quot;ooplot&quot; &quot;overplot&quot; ## [17] &quot;panel.overplot&quot; &quot;plot.venn&quot; &quot;plotCI&quot; &quot;plotLowess&quot; ## [21] &quot;plotmeans&quot; &quot;qqnorm.aov&quot; &quot;redblue&quot; &quot;redgreen&quot; ## [25] &quot;reorder.factor&quot; &quot;residplot&quot; &quot;rich.colors&quot; &quot;sinkplot&quot; ## [29] &quot;smartlegend&quot; &quot;space&quot; &quot;textplot&quot; &quot;venn&quot; ## [33] &quot;wapply&quot; EJEMPLOS DE VISUALIZACIÓN DE GRÁFICOS demo(graphics) ## ## ## demo(graphics) ## ---- ~~~~~~~~ ## ## &gt; # Copyright (C) 1997-2009 The R Core Team ## &gt; ## &gt; require(datasets) ## ## &gt; require(grDevices); require(graphics) ## ## &gt; ## Here is some code which illustrates some of the differences between ## &gt; ## R and S graphics capabilities. Note that colors are generally specified ## &gt; ## by a character string name (taken from the X11 rgb.txt file) and that line ## &gt; ## textures are given similarly. The parameter &quot;bg&quot; sets the background ## &gt; ## parameter for the plot and there is also an &quot;fg&quot; parameter which sets ## &gt; ## the foreground color. ## &gt; ## &gt; ## &gt; x &lt;- stats::rnorm(50) ## ## &gt; opar &lt;- par(bg = &quot;white&quot;) ## ## &gt; plot(x, ann = FALSE, type = &quot;n&quot;) ## ## &gt; abline(h = 0, col = gray(.90)) ## ## &gt; lines(x, col = &quot;green4&quot;, lty = &quot;dotted&quot;) ## ## &gt; points(x, bg = &quot;limegreen&quot;, pch = 21) ## ## &gt; title(main = &quot;Simple Use of Color In a Plot&quot;, ## + xlab = &quot;Just a Whisper of a Label&quot;, ## + col.main = &quot;blue&quot;, col.lab = gray(.8), ## + cex.main = 1.2, cex.lab = 1.0, font.main = 4, font.lab = 3) ## ## &gt; ## A little color wheel. This code just plots equally spaced hues in ## &gt; ## a pie chart. If you have a cheap SVGA monitor (like me) you will ## &gt; ## probably find that numerically equispaced does not mean visually ## &gt; ## equispaced. On my display at home, these colors tend to cluster at ## &gt; ## the RGB primaries. On the other hand on the SGI Indy at work the ## &gt; ## effect is near perfect. ## &gt; ## &gt; par(bg = &quot;gray&quot;) ## ## &gt; pie(rep(1,24), col = rainbow(24), radius = 0.9) ## ## &gt; title(main = &quot;A Sample Color Wheel&quot;, cex.main = 1.4, font.main = 3) ## ## &gt; title(xlab = &quot;(Use this as a test of monitor linearity)&quot;, ## + cex.lab = 0.8, font.lab = 3) ## ## &gt; ## We have already confessed to having these. This is just showing off X11 ## &gt; ## color names (and the example (from the postscript manual) is pretty &quot;cute&quot;. ## &gt; ## &gt; pie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12) ## ## &gt; names(pie.sales) &lt;- c(&quot;Blueberry&quot;, &quot;Cherry&quot;, ## + &quot;Apple&quot;, &quot;Boston Cream&quot;, &quot;Other&quot;, &quot;Vanilla Cream&quot;) ## ## &gt; pie(pie.sales, ## + col = c(&quot;purple&quot;,&quot;violetred1&quot;,&quot;green3&quot;,&quot;cornsilk&quot;,&quot;cyan&quot;,&quot;white&quot;)) ## ## &gt; title(main = &quot;January Pie Sales&quot;, cex.main = 1.8, font.main = 1) ## ## &gt; title(xlab = &quot;(Don&#39;t try this at home kids)&quot;, cex.lab = 0.8, font.lab = 3) ## ## &gt; ## Boxplots: I couldn&#39;t resist the capability for filling the &quot;box&quot;. ## &gt; ## The use of color seems like a useful addition, it focuses attention ## &gt; ## on the central bulk of the data. ## &gt; ## &gt; par(bg=&quot;cornsilk&quot;) ## ## &gt; n &lt;- 10 ## ## &gt; g &lt;- gl(n, 100, n*100) ## ## &gt; x &lt;- rnorm(n*100) + sqrt(as.numeric(g)) ## ## &gt; boxplot(split(x,g), col=&quot;lavender&quot;, notch=TRUE) ## ## &gt; title(main=&quot;Notched Boxplots&quot;, xlab=&quot;Group&quot;, font.main=4, font.lab=1) ## ## &gt; ## An example showing how to fill between curves. ## &gt; ## &gt; par(bg=&quot;white&quot;) ## ## &gt; n &lt;- 100 ## ## &gt; x &lt;- c(0,cumsum(rnorm(n))) ## ## &gt; y &lt;- c(0,cumsum(rnorm(n))) ## ## &gt; xx &lt;- c(0:n, n:0) ## ## &gt; yy &lt;- c(x, rev(y)) ## ## &gt; plot(xx, yy, type=&quot;n&quot;, xlab=&quot;Time&quot;, ylab=&quot;Distance&quot;) ## ## &gt; polygon(xx, yy, col=&quot;gray&quot;) ## ## &gt; title(&quot;Distance Between Brownian Motions&quot;) ## ## &gt; ## Colored plot margins, axis labels and titles. You do need to be ## &gt; ## careful with these kinds of effects. It&#39;s easy to go completely ## &gt; ## over the top and you can end up with your lunch all over the keyboard. ## &gt; ## On the other hand, my market research clients love it. ## &gt; ## &gt; x &lt;- c(0.00, 0.40, 0.86, 0.85, 0.69, 0.48, 0.54, 1.09, 1.11, 1.73, 2.05, 2.02) ## ## &gt; par(bg=&quot;lightgray&quot;) ## ## &gt; plot(x, type=&quot;n&quot;, axes=FALSE, ann=FALSE) ## ## &gt; usr &lt;- par(&quot;usr&quot;) ## ## &gt; rect(usr[1], usr[3], usr[2], usr[4], col=&quot;cornsilk&quot;, border=&quot;black&quot;) ## ## &gt; lines(x, col=&quot;blue&quot;) ## ## &gt; points(x, pch=21, bg=&quot;lightcyan&quot;, cex=1.25) ## ## &gt; axis(2, col.axis=&quot;blue&quot;, las=1) ## ## &gt; axis(1, at=1:12, lab=month.abb, col.axis=&quot;blue&quot;) ## ## &gt; box() ## ## &gt; title(main= &quot;The Level of Interest in R&quot;, font.main=4, col.main=&quot;red&quot;) ## ## &gt; title(xlab= &quot;1996&quot;, col.lab=&quot;red&quot;) ## ## &gt; ## A filled histogram, showing how to change the font used for the ## &gt; ## main title without changing the other annotation. ## &gt; ## &gt; par(bg=&quot;cornsilk&quot;) ## ## &gt; x &lt;- rnorm(1000) ## ## &gt; hist(x, xlim=range(-4, 4, x), col=&quot;lavender&quot;, main=&quot;&quot;) ## ## &gt; title(main=&quot;1000 Normal Random Variates&quot;, font.main=3) ## ## &gt; ## A scatterplot matrix ## &gt; ## The good old Iris data (yet again) ## &gt; ## &gt; pairs(iris[1:4], main=&quot;Edgar Anderson&#39;s Iris Data&quot;, font.main=4, pch=19) ## ## &gt; pairs(iris[1:4], main=&quot;Edgar Anderson&#39;s Iris Data&quot;, pch=21, ## + bg = c(&quot;red&quot;, &quot;green3&quot;, &quot;blue&quot;)[unclass(iris$Species)]) ## ## &gt; ## Contour plotting ## &gt; ## This produces a topographic map of one of Auckland&#39;s many volcanic &quot;peaks&quot;. ## &gt; ## &gt; x &lt;- 10*1:nrow(volcano) ## ## &gt; y &lt;- 10*1:ncol(volcano) ## ## &gt; lev &lt;- pretty(range(volcano), 10) ## ## &gt; par(bg = &quot;lightcyan&quot;) ## ## &gt; pin &lt;- par(&quot;pin&quot;) ## ## &gt; xdelta &lt;- diff(range(x)) ## ## &gt; ydelta &lt;- diff(range(y)) ## ## &gt; xscale &lt;- pin[1]/xdelta ## ## &gt; yscale &lt;- pin[2]/ydelta ## ## &gt; scale &lt;- min(xscale, yscale) ## ## &gt; xadd &lt;- 0.5*(pin[1]/scale - xdelta) ## ## &gt; yadd &lt;- 0.5*(pin[2]/scale - ydelta) ## ## &gt; plot(numeric(0), numeric(0), ## + xlim = range(x)+c(-1,1)*xadd, ylim = range(y)+c(-1,1)*yadd, ## + type = &quot;n&quot;, ann = FALSE) ## ## &gt; usr &lt;- par(&quot;usr&quot;) ## ## &gt; rect(usr[1], usr[3], usr[2], usr[4], col=&quot;green3&quot;) ## ## &gt; contour(x, y, volcano, levels = lev, col=&quot;yellow&quot;, lty=&quot;solid&quot;, add=TRUE) ## ## &gt; box() ## ## &gt; title(&quot;A Topographic Map of Maunga Whau&quot;, font= 4) ## ## &gt; title(xlab = &quot;Meters North&quot;, ylab = &quot;Meters West&quot;, font= 3) ## ## &gt; mtext(&quot;10 Meter Contour Spacing&quot;, side=3, line=0.35, outer=FALSE, ## + at = mean(par(&quot;usr&quot;)[1:2]), cex=0.7, font=3) ## ## &gt; ## Conditioning plots ## &gt; ## &gt; par(bg=&quot;cornsilk&quot;) ## ## &gt; coplot(lat ~ long | depth, data = quakes, pch = 21, bg = &quot;green3&quot;) ## ## &gt; par(opar) Ejercicios Instala las siguientes librerías que te serviran durante todo el curso markdown ggplot2 INFORMACIÓN ADICIONAL Existen repositorios adicionales a CRAN, uno de ellos es Bioconductor, en él puedes buscar e instalar paquetes como ggtree. Otra plataforma que resulta de gran apoyo es GitHub, permite crear, almacenar, administrar y compartir códigos de distintos lenguajes de programación. Una de sus ventajas es la consulta de repositorios, por ejemplo mixOmics, el cual contiene una amplia variedad de métodos para la exploración e integración de datos biológicos. El paquete mixOmics contiene una gran cantidad de técnicas multivariadas que se han desarrollado y validado en múltiples estudios biológicos, esto mediante la implementación simultánea de distintas “ómicas” para obtener una mejor compresión del sistema. Ejercicio 1. Explora la página de Bioconductor, apóyate de su buscador e instala el paquete ggtree. 1.6 Ayuda en R En la mayoría de las ocasiones desconocemos el alcance de alguna paquetería, los criterios de alguna función o en general, sabemos lo que queremos hacer pero no tenemos ni idea de qué paqueteria usar. Los comandos help() y ? son equivalentes, ambos van a permitir encontrar información sobre paqueterias, comandos o funciones generales de R. Se debe teclear help(nombre_comando) o ?nombre_comando Por ejemplo, para buscar información detallada del comando solve: help(solve) ?solve Para buscar ayuda de funciones o palabra reservadas se utilizan comillas: help(&quot;for&quot;) También existen opciones como help.start() y help.search() para obtener una versión extendida de la ayuda general desplegada en un navegador. Para ello se requiere tener la ayuda en HTML instalada y conexión a la red. help.search() es una función que escanea documentación para paquetes previamente instalados. Ejemplo: help.search(&quot;clustering&quot;) help.start() es una función que despliega información basada en documentos en línea de la versión actual de R, además de brindar links a manuales y la lista de las paqueterías instaladas, entre otras cosas. Ejemplo: help.start() ## starting httpd help server ... done ## If the browser launched by &#39;/usr/bin/open&#39; is already running, it is ## *not* restarted, and you must switch to its window. ## Otherwise, be patient ... Cuando queremos ver ejemplos del uso de los comandos usamos la función example() Ejemplo: example(&quot;hclust&quot;) ## ## hclust&gt; require(graphics) ## ## hclust&gt; ### Example 1: Violent crime rates by US state ## hclust&gt; ## hclust&gt; hc &lt;- hclust(dist(USArrests), &quot;ave&quot;) ## ## hclust&gt; plot(hc) ## ## hclust&gt; plot(hc, hang = -1) ## ## hclust&gt; ## Do the same with centroid clustering and *squared* Euclidean distance, ## hclust&gt; ## cut the tree into ten clusters and reconstruct the upper part of the ## hclust&gt; ## tree from the cluster centers. ## hclust&gt; hc &lt;- hclust(dist(USArrests)^2, &quot;cen&quot;) ## ## hclust&gt; memb &lt;- cutree(hc, k = 10) ## ## hclust&gt; cent &lt;- NULL ## ## hclust&gt; for(k in 1:10){ ## hclust+ cent &lt;- rbind(cent, colMeans(USArrests[memb == k, , drop = FALSE])) ## hclust+ } ## ## hclust&gt; hc1 &lt;- hclust(dist(cent)^2, method = &quot;cen&quot;, members = table(memb)) ## ## hclust&gt; opar &lt;- par(mfrow = c(1, 2)) ## ## hclust&gt; plot(hc, labels = FALSE, hang = -1, main = &quot;Original Tree&quot;) ## ## hclust&gt; plot(hc1, labels = FALSE, hang = -1, main = &quot;Re-start from 10 clusters&quot;) ## ## hclust&gt; par(opar) ## ## hclust&gt; ### Example 2: Straight-line distances among 10 US cities ## hclust&gt; ## Compare the results of algorithms &quot;ward.D&quot; and &quot;ward.D2&quot; ## hclust&gt; ## hclust&gt; mds2 &lt;- -cmdscale(UScitiesD) ## ## hclust&gt; plot(mds2, type=&quot;n&quot;, axes=FALSE, ann=FALSE) ## ## hclust&gt; text(mds2, labels=rownames(mds2), xpd = NA) ## ## hclust&gt; hcity.D &lt;- hclust(UScitiesD, &quot;ward.D&quot;) # &quot;wrong&quot; ## ## hclust&gt; hcity.D2 &lt;- hclust(UScitiesD, &quot;ward.D2&quot;) ## ## hclust&gt; opar &lt;- par(mfrow = c(1, 2)) ## ## hclust&gt; plot(hcity.D, hang=-1) ## ## hclust&gt; plot(hcity.D2, hang=-1) ## ## hclust&gt; par(opar) Todo lo anterior requiere que conozcamos el nombre correcto del comando, pero ¿qué pasa si no lo sabemos?, ¿lloramos? no. Podemos utilizar el comando apropos() para encontrar todo lo relacionado con algún término. Ejemplo: apropos(&quot;solve&quot;) ## [1] &quot;backsolve&quot; &quot;forwardsolve&quot; &quot;qr.solve&quot; &quot;solve&quot; ## [5] &quot;solve.default&quot; &quot;solve.qr&quot; Ahora, ¿qué pasa cuando tengo la idea de lo que quiero hacer pero no se qué paqueteria usar, ni cuál comando? puedo usar ?? seguido de una palabra clave. Esto nos arrojará sugerencias sobre lo que deseamos hacer. Ejemplo: ??DNA NOTA Se recomienda el uso del autocompletado, de esta manera reducirás errores de dedo. "],["bases-prácticas-en-r.html", "Chapter 2 Bases prácticas en R 2.1 Expresiones y asignaciones 2.2 Movimiento entre directorios 2.3 Bash en R 2.4 Operaciones aritméticas 2.5 Tipos de valores en R", " Chapter 2 Bases prácticas en R 2.1 Expresiones y asignaciones Las expresiones y asignaciones son los dos tipos de resultados que arroja R. Las expresiones sólo se muestran en la salida estándar y NO se guardan en alguna variable, es decir, cada que se corra la línea se obtendran valores distintos. Ejemplo: rnorm(10) ## [1] 1.10666401 0.60957103 -0.57328923 -0.32507817 0.56218200 -0.02635869 ## [7] -0.14065970 0.65424638 1.34175986 -0.30134338 rnorm(10) ## [1] 0.4299497 0.1829354 -0.4932218 0.9841284 -0.5154700 0.6628050 ## [7] -1.8048923 0.2154675 -1.2786883 -0.3158008 Las asignaciones, como su nombre lo indica, se guardan los valores al ser asignados a una variable. Esto se puede lograr mediante el uso de &lt;- Ejemplo: x &lt;- rnorm(10) x ## [1] -1.2005691 -0.7134632 0.6326810 0.5576434 -0.1854318 0.8785185 ## [7] 0.9830089 -0.6796926 1.9291262 0.1017411 NOTA El símbolo &lt;- es equivalente en función a = pero puede llevar a confusiones importantes con el operador ==. Operador de asignación. Así que evita el uso del igual Otro punto a considerar respecto a las asignaciones es que R es capaz de distinguir entre mayúsculas y minúsculas, por lo que la misma letra puede contener valores distintos. Ejemplo: a &lt;- 3 A &lt;- 6 a ## [1] 3 A ## [1] 6 Una opción es definirlas en más de una línea, ejemplo: a &lt;- pi + 12 NOTA Ten mucha precaución con el nombre que asignas a un valor, ya que podrías sobreescribirlo y se le quedará asignado el último valor. Ejemplo: b &lt;- 3 b ## [1] 3 b &lt;- 8 b ## [1] 8 La separación de comandos puede darse de dos formas: Empleando ;, ejemplo: a &lt;- 3; b &lt;-5 o usando un salto de línea, esta es una mejor opción, ejemplo: a &lt;- 3 b &lt;-5 2.2 Movimiento entre directorios Otra de las ventajas que ofrece R es que permite ubicar algún archivo o saber la dirección del directorio en la que nos encontramos actualmente, todo ello sin necesidad de salir de la interfaz. Para saber en qué directorio estamos, se teclea: getwd() ## [1] &quot;/Users/robertoalvarez/Documents/GitHub/BravoGarciaMariaFernandaBioinfo2024&quot; Para cambiar de directorio utilizamos setwd(\"direccion_a_la_que_quieres_ir\") setwd(&quot;~&quot;) 2.3 Bash en R También se pueden usar los comandos de la terminal de bash dentro de R, utilizando la función system() Para listar archivos de una carpeta usamos ls system(&quot;ls -la&quot;) Para saber en qué directorio estamos usamos la función análoga a getwd(), que es pwd system(&quot;pwd&quot;) Importante: Como regla general todos los nombres van entre comillas: nombre de carpetas, archivos, de columnas, de renglones,etc. 2.4 Operaciones aritméticas R también puede ser usado como calculadora. Se puede sumar, restar, multiplicar,dividir, “exponenciar” y calcular la raíz cuadrada. SUMA con el operador + a + b ## [1] 8 RESTA con el operador - a - b ## [1] -2 MULTIPLICACIÓN con el operador * a * b ## [1] 15 DIVISIÓN con el operador / a / b ## [1] 0.6 EXPONENTE con los operadoradores ** o ^ a ** b ## [1] 243 a ^ b ## [1] 243 RAÍZ CUADRADA con la función sqrt() sqrt(a) ## [1] 1.732051 LOGARITMO con la función log() log(a) ## [1] 1.098612 2.4.1 Prioridad en las operaciones Las operaciones se efectuan en el siguiente orden: izquierda a derecha sqrt() y ** ^ * y / + y - &lt;- IMPORTANTE Este orden se altera si se presenta un paréntesis. En ese caso la operación dentro del paréntesis es la que se realiza primero. Ejemplos: 4 + 2 * 3 = 4 + 6 = 10 4 - 15/3 + 3^2 + sqrt(9) = 4 - 15/3 + 9 + 3 = 4 - 5 + 12 = 13 4 - (3+7)^2 + (2+3)/5 = 4 - (10)^2 + 5/5 = 4 - 100 + 1 = -95 Ejercicios Resuelve en un pedazo de papel primero para saber cuál sería el resultado de las siguientes operaciones aritméticas. Después comprueba tu resultado tecleandolas en R. 1 + 2*3 + 3 + 15/3 4 - 15/3 + 3^2 + 3*sqrt(81) 40 - (4+3)^2 + (10-5)/3 32^5 - (3-5)*2 + 32/sqrt(64) 1/(3^-3) + (8-10^2) - (25/sqrt(25))^2 2.5 Tipos de valores en R 2.5.1 Valores booleanos También conocidos como Datos lógicos. Este tipo de datos sólo contienen información TRUE o FALSE, lo cual sirve para evaluar si los elementos de un vector cumplen con los criterios deseados. Para ello se utilizan los operadores de comparación: igual == no es igual a != menor que &lt; mayor que &gt; menor o igual que &lt;= mayor o igual que &gt;= Ejemplo: 1 &lt; 5 ## [1] TRUE 10 == 0 ## [1] FALSE 10 != 0 ## [1] TRUE 10 &lt;= 0 ## [1] FALSE NOTA Dentro de R los valores lógicos TRUE y FALSE tienen un valor numérico. TRUEequivale a 1 y FALSE es equivalente a 0. Esto permite cuantificar el número de elementos que cumplen con los criterios, ¿cómo? mediante la suma de los TRUEs. Ejercicios Demuestra si: 1. El logaritmo base 10 de 20 es menor que la raíz cuadrada de 4. Desarrollalo en una sola línea. 2. 1/3^-1 es igual a 3/1^-1 3. (-2)^2 no es igual a (2)^2 2.5.2 Caracter Son strings de texto y se caracterizan porque cada uno de los elementos va entre comillas. Los elementos pueden ser desde sólo un caracter hasta oraciones. Podría parecer que la variable a la cual lo asignamos contiene números, pero las comillas indican que serán tratados como texto. Podemos subsetearlos por su índice o buscando literalmente el texto. Ejemplo: x&lt;- &quot;La candente mañana de febrero en que Beatriz Viterbo murió, después de una imperiosa agonía que no se rebajó un solo instante ni al sentimentalismo ni al miedo&quot; 2.5.3 Enteros y números (numeric) Existen dos formas diferentes en que las computadoras pueden guardar los números y hacer operaciones matemáticas con ellos: numeric e integer. Por lo común no importa esta diferencia, pero puede ser relevante para algunas funciones de Bioconductor. En R se representan los números como numeric y el tamaño máximo que maneja para un integer es ligeramente más chico que el tamaño del genoma humano. ¿Cómo revisar si un objeto es numeric o entero? Con la función class() x &lt;- 1 class(x) ## [1] &quot;numeric&quot; x &lt;- 1:3 class(x) ## [1] &quot;integer&quot; "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
